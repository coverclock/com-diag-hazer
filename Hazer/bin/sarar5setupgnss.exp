#!/usr/bin/expect --
# Copyright 2022 Digital Aggregates Corporation, Colorado, USA
# Licensed under the terms in LICENSE.txt
# Chip Overclock <coverclock@diag.com>
# https://github.com/coverclock/com-diag-hazer
# Configures a U-blox SARA-R5 device using the serial connection
# to the cellular modem AT interface. This script uses the Diminuto
# serialtool utility to leverage its O_NONBLOCK openat(2).
# THIS IS A WORK IN PROGRESS.
# Usage: sarar5setupgnss.exp [ DEVICE [ RATE ] ]
# Defaults: sarar5setupgnss.exp /dev/ttyUSB1 115200

# Set defaults.

set device "/dev/ttyUSB1"
set rate "115200"

# Set parameters.

set argc [ llength $argv ]
if { $argc > 0 } { set device   [ lindex $argv 0 ] }
if { $argc > 1 } { set rate     [ lindex $argv 1 ] }

# Prevent '\r' from being translated to '\n'.

set stty_init "raw"

send_user "Opening $device\n"
spawn serialtool -N -D $device -b $rate -8 -n -1

# Terminate any partial or invalid command entered prior.

send_user "Sending Carriage Return\n"
send "\r"

# Proceed with configuration.

set commands [ list \
    "AT" \
    "AT" \
    "AT+CMEE=2" \
]

set commandn [ llength $commands ]
set commandi 0
while { $commandi < $commandn } {
    set command [ lindex $commands $commandi ]
    set commandi [ expr $commandi + 1 ]
    set response "OK"
    send_user "Sending $command\n"
    send_user "Expecting $response\n"
    send "$command\r"
    expect {
        "+PACSP0" { send_user "Received +PACSP0\n"; exp_continue }
        "+PACSP1" { send_user "Received +PACSP1\n"; exp_continue }
        "$command" { send_user "Echoed\n"; exp_continue }
        timeout { send_user "Timeout\n"; exit 1 }
        "ERROR" { send_user "Failed\n"; exit 1 }
        "$response"
    }
    send_user "Received $response\n"
}

set commands [ list \
    "AT+UGPS?" \
    "AT+UGPS=0" \
]

set commandn [ llength $commands ]
set commandi 0
while { $commandi < $commandn } {
    set command [ lindex $commands $commandi ]
    set commandi [ expr $commandi + 1 ]
    set response "OK"
    send_user "Sending $command\n"
    send_user "Expecting $response\n"
    send "$command\r"
    expect {
        "+PACSP0" { send_user "Received +PACSP0\n"; exp_continue }
        "+PACSP1" { send_user "Received +PACSP1\n"; exp_continue }
        "$command" { send_user "Echoed\n"; exp_continue }
        timeout { send_user "Timeout\n"; exit 1 }
        "ERROR" { send_user "Perhaps already off\n" }
        "+UGPS: 0" { send_user "Already off\n"; exp_continue }
        "$response"
    }
    send_user "Received $response\n"
}

set commands [ list \
    "AT+UGPRF=1" \
    "AT+UGGGA=1" \
    "AT+UGGLL=1" \
    "AT+UGGSA=1" \
    "AT+UGGSV=1" \
    "AT+UGRMC=1" \
    "AT+UGVTG=1" \
    "AT+ULOCGNSS=1,0,3,7,0,0,1,1,2,0,9,79,0,0" \
    "AT+UGPS=1,0,79" \
]

#   "AT+UGPIOC=16,2"
#   "AT+UGPIOC=19,22"
#   "AT+UTIME=1,1"

set commandn [ llength $commands ]
set commandi 0
while { $commandi < $commandn } {
    set command [ lindex $commands $commandi ]
    set commandi [ expr $commandi + 1 ]
    set response "OK"
    send_user "Sending $command\n"
    send_user "Expecting $response\n"
    send "$command\r"
    expect {
        "+PACSP0" { send_user "Received +PACSP0\n"; exp_continue }
        "+PACSP1" { send_user "Received +PACSP1\n"; exp_continue }
        "$command" { send_user "Echoed\n"; exp_continue }
        timeout { send_user "Timeout\n"; exit 1 }
        "ERROR" { send_user "Failed\n"; exit 1 }
        "$response"
    }
    send_user "Received $response\n"
}

send_user "Closing\n"
close
exit 0
